{"name":"FXC","tagline":"Flyweight XML Construction kit","body":"FXC is designed to facilitate the creation of a simple XML document with an attempt to be as minimalist as possible without impacting the ability to produce readable xml if necessary\r\n\r\nFXC can be described by what it doesn't do\r\n\r\n* No validation\r\n* No namespace checking\r\n* No value checks\r\n\r\nIt's purpose is to simply provide xml, and when formatted, in as nice a formatting as possible.\r\n\r\n```java\r\nElement note = new Element(\"note\")\r\n                  .add(\"to\", \"Tove\")\r\n                  .add(\"from\", \"Jani\")\r\n                  .add(\"heading\", \"Reminder\")\r\n                  .add(\"body\", \"Don't forget me this weekend!\");\r\n```\r\n\t\r\nwhich produces, when formatted, the following\r\n\t\r\n```xml\r\n<note>\r\n    <to>Tove</to>\r\n    <from>Jani</from>\r\n    <heading>Reminder</heading>\r\n    <body>Don't forget me this weekend!</body>\r\n </note>\r\n```\r\n\r\nTo produce a formatted version you pass in a writer and a formatter\r\n\r\n```java\r\nout.write(note.toString(new Formatter()));\r\n```\r\n\r\nThe Formatter provides a default set of setting to provide indentation and line breaking based on the length of a node. If the content of a given node is longer than the Formatter's segment length it will split the node into multiple lines, if a text segment is too long it will break the text across multiple lines for ease of viewing.\r\n\r\n```xml\r\n<?xml version='1.0'?>\r\n<note>\r\n  <to>Tove</to>\r\n  <from>Jani</from>\r\n  <heading>Reminder</heading>\r\n  <body>\r\n    This is a very long complex note that includes a \r\n    multi lined string and styling\r\n  </body>\r\n</note>\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}